name: Build and Push Docker Image

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the Docker image'
        required: false
  repository_dispatch:
    types: [docker-image-updated]

jobs:
  PUBLISH_DOCKER_IMAGE:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      DOCKER_USERNAME: "mahmoudazaid"
      DOCKER_SCOUT: "https://github.com/docker/scout-cli/releases/download/v1.15.0/docker-scout_1.15.0_linux_amd64.tar.gz"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: ~/.cache/docker
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_USERNAME }}/appium-device-farm:${{ github.sha }} .

    - name: Run container to extract versions
      id: extract_versions
      run: |
        # Run the built container in detached mode
        container_id=$(docker run -d ${{ env.DOCKER_USERNAME }}/appium-device-farm:${{ github.sha }} sleep 10)

        # Extract versions from inside the container
        NODE_VERSION=$(docker exec $container_id node -v | tr -d 'v')
        NPM_VERSION=$(docker exec $container_id npm -v)
        APPIUM_VERSION=$(docker exec $container_id appium --version)
        UIAUTOMATOR_VERSION=$(docker exec $container_id npm ls uiautomator2 --depth=0 | grep uiautomator2 | awk '{ print $2 }' | tr -d '@')
        DEVICE_FARM_VERSION=$(docker exec $container_id npm ls device_farm --depth=0 | grep device_farm | awk '{ print $2 }' | tr -d '@')

        # Output versions to environment variables
        echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV
        echo "NPM_VERSION=$NPM_VERSION" >> $GITHUB_ENV
        echo "APPIUM_VERSION=$APPIUM_VERSION" >> $GITHUB_ENV
        echo "UIAUTOMATOR_VERSION=$UIAUTOMATOR_VERSION" >> $GITHUB_ENV
        echo "DEVICE_FARM_VERSION=$DEVICE_FARM_VERSION" >> $GITHUB_ENV

        # Stop and remove the container
        docker stop $container_id
        docker rm $container_id

    - name: Update README.md with extracted versions
      run: |
        # Replace version placeholders in the README file with extracted versions
        sed -i "s/22.x/${{ env.NODE_VERSION }}/g" README.md
        sed -i "s/9.x/${{ env.NPM_VERSION }}/g" README.md
        sed -i "s/2.12.1/${{ env.APPIUM_VERSION }}/g" README.md
        sed -i "s/3.8.0/${{ env.UIAUTOMATOR_VERSION }}/g" README.md
        sed -i "s/9.2.3/${{ env.DEVICE_FARM_VERSION }}/g" README.md

    - name: Commit and push updated README.md
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add README.md
        git commit -m "Update versions in README.md"
        git push

    - name: Install Docker Scout ${{ env.DOCKER_SCOUT }}
      run: |
        curl -fsSL ${{ env.DOCKER_SCOUT }} | tar xz -C /usr/local/bin
        sudo ln -s /usr/local/bin/docker-scout /usr/bin/scout
        docker-scout version
  
    - name: Run Docker Scout to scan the images for vulnerabilities
      run: |
        docker-scout cves ${{ env.DOCKER_USERNAME }}/appium-device-farm:${{ github.sha }}
        docker-scout cves ${{ env.DOCKER_USERNAME }}/appium-device-farm:latest

    - name: Push Docker images
      run: |
        docker push ${{ env.DOCKER_USERNAME }}/appium-device-farm:${{ github.sha }}
        docker push ${{ env.DOCKER_USERNAME }}/appium-device-farm:latest

    - name: Clean up Docker images
      run: |
        docker image prune -af